#FATAL      0 - 严重错误  
#ERROR      3 - 错误
#WARN       4 - 警告
#INFO       6  -一般信息
#DEBUG      7  -调试信息
log4j.rootLogger=INFO, stdout, file
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%n%-d{yyyy-MM-dd HH:mm:ss}%n[%p]-[Thread: %t]-[%C.%M()]: %m%n

# Output to the File
#log4j.appender.file=org.apache.log4j.FileAppender
#log4j.appender.file.File=${catalina.home}/logs/jfinal_demo.log
#log4j.appender.file.layout=org.apache.log4j.PatternLayout
#log4j.appender.file.layout.ConversionPattern=%n%-d{yyyy-MM-dd HH:mm:ss}%n[%p]-[Thread: %t]-[%C.%M()]: %m%n
# #每一天产生1个日志文件  
#log4j.appender.file=org.apache.log4j.DailyRollingFileAppender
log4j.appender.file=org.apache.log4j.RollingFileAppender
log4j.appender.file.File=${catalina.home}/logs/flower.log
log4j.appender.file.MaxFileSize=10MB
log4j.appender.file.MaxBackupIndex=5
#日志文件是否追加,默认true  
log4j.appender.file.Append=true
#每半天一个文件
#log4j.appender.file.DatePattern='.' yyyy-MM-dd-HH-mm  每分钟  
#log4j.appender.file.DatePattern='.' yyyy-MM-dd-HH    每小时  
#log4j.appender.file.DatePattern='.' yyyy-MM-dd    每天  
#log4j.appender.file.DatePattern='.' yyyy-MM-dd-a  每半天  
#日志输出级别
log4j.appender.file.Threshold=INFO
#日志编码
log4j.appender.file.Encoding=UTF-8
#日志中输出的日志的格式
#org.apache.log4j.HTMLLayout（以HTML表格形式布局）， 
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式）， 
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）， 
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
log4j.appender.file.layout=org.apache.log4j.PatternLayout
#时间分割
#%m 输出代码中指定的消息
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
#%r 输出自应用启动到输出该log信息耗费的毫秒数 
#%c 输出所属的类目，通常就是所在类的全名 
#%t 输出产生该日志事件的线程名 
#%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n” 
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921 
#%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
log4j.appender.file.layout.ConversionPattern=%n%-d{yyyy-MM-dd HH:mm:ss}%n[%p]-[Thread: %t]-[%C.%M()]: %m%n
